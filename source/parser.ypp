%{
#include "./header/util.hpp"
#include "./header/ast.hpp"
#include <iostream>

#define YYDEBUG 1
#define NUMBER_OF_REGISTERS 65536

using namespace std;

int registers[NUMBER_OF_REGISTERS];
bool compile = true;
bool debug = true;

void yyerror(string s){
  cerr<<s<<endl;
  exit(EXIT_FAILURE);
}

int yylex();

%}

%union{
	ExprAST* e;
	vector<ExprAST*> *ve;
 	int i;
}

%token print_token add_token mul_token label_token jump_token inc_token if_token else_token while_token end_block_token
%token<i> num_token address_token

%type <e> Instruction NumVal
%type <ve> Instruction_Block

%%
//grammar for testing

Program: Program Instruction {
	if(compile)
		$2->codegen();
	else
		$2->interpret();
 }
| Instruction {
	if(compile)
		$1->codegen();
	else
		$1->interpret();
 }
;

Instruction: print_token num_token NumVal {
		$$ = new PrintNumExprAST($3);
}
| print_token address_token NumVal{
		$$ = new PrintCharExprAST($3);
}
| add_token NumVal NumVal address_token{
		$$ = new AddExprAST($2, $3, $4);
}
| mul_token NumVal NumVal address_token{
		$$ = new MulExprAST($2, $3, $4);
}
| inc_token address_token{
		$$ = new IncExprAST($2);
}
| if_token NumVal Instruction_Block else_token Instruction_Block end_block_token{
		$$ = new IfElseExprAST($2, new SeqExprAST(*$3), new SeqExprAST(*$5));
		delete $3;
		delete $5;
}
| while_token NumVal Instruction_Block end_block_token{
		$$ = new WhileExprAST($2, new SeqExprAST(*$3));
		delete $3;
}
;

Instruction_Block: Instruction_Block Instruction {
	$$ = $1;
	$$->push_back($2);
}
| Instruction {
	$$ = new vector<ExprAST*>();
	$$->push_back($1);
}
;

NumVal: num_token {
		//cout << $1 << endl;
		$$ = new NumberExprAST($1);
}
| address_token{
		$$ = new VarExprAST($1);
}
%%

extern FILE* yyin;
extern Module* TheModule;
extern LLVMContext TheContext;
extern IRBuilder<> Builder;
Value *StrPrintNum = NULL;
Value *StrPrintChar = NULL;
Function* PrintfFun;
Function* MainFun;

int main(int argc, char** argv){

	if(argc < 2 || argc > 3){
		yyerror("Usage: ./pixelcode path_to_image_file -i(for interpretation)");
	}

	if(argc == 3 && strcmp(argv[1], "-i") == 0){
		cout << "Pixel Interpretation: \n" << endl;
		compile = false;
	}

	if(argc == 2)
		parseImage(argv[1]);
	else
		parseImage(argv[2]);

	yyin = fopen("tmpReprFile", "r");
	if(!yyin)
		yyerror("Unable to open tmpReprFile file!");

	if(compile){
		//cout<<"initing module and pass" << endl;
		InitializeModuleAndPassManager();

		//cout<<"creating pritf" << endl;
		FunctionType *FT1 = FunctionType::get(IntegerType::getInt32Ty(TheContext), PointerType::get(Type::getInt8Ty(TheContext), 0), true);
  	PrintfFun = Function::Create(FT1, Function::ExternalLinkage, "printf", TheModule);

		//cout<<"creating main" << endl;
		vector<Type*> v(0);
  	FunctionType* FT2 = FunctionType::get(Type::getInt32Ty(TheContext), v, false);
  	MainFun = Function::Create(FT2, Function::ExternalLinkage, "main", TheModule);
  	BasicBlock *BB = BasicBlock::Create(TheContext, "entry", MainFun);
  	Builder.SetInsertPoint(BB);

		//cout<<"creating print strings" << endl;
		StrPrintNum = Builder.CreateGlobalStringPtr("%d\n");
		StrPrintChar = Builder.CreateGlobalStringPtr("%c\n");
	}

	//cout<<"begin parse" << endl;
	yyparse();
	//cout<<"finished parse" << endl;

	if(compile){
		Builder.CreateRet(ConstantInt::get(TheContext, APInt(32, 0)));
  	verifyFunction(*MainFun);

		//string fileName(splitFileName(argv[1]) + ".ll" );
		//TODO: output IR to ll file then use llc on ll file and gcc on s file to auto-generate an executable
		TheModule->print(outs(), nullptr);
		delete TheModule;
	}

	fclose(yyin);
	if(!debug)
		remove("tmpReprFile");
  return 0;
}
