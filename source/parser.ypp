%{
#include "./header/util.hpp"
#include "./header/ast.hpp"
#include <iostream>

#define YYDEBUG 1
#define NUMBER_OF_REGISTERS 65536

using namespace std;

int registers[NUMBER_OF_REGISTERS];
bool compile = true;

void yyerror(string s){
  cerr<<s<<endl;
  exit(EXIT_FAILURE);
}

int yylex();

%}

%union{
	ExprAST* e;
 	int i;
}

%token print_token add_token mul_token label_token jump_token inc_token
%token<i> num_token address_token

%type <e> Instruction NumVal

%%
//grammar for testing

Program: Program Instruction {
		$2->codegen();
 }
| Instruction {
		$1->codegen();
 }
;

Instruction: print_token num_token NumVal {
	if(compile){
		$$ = new PrintNumExprAST($3);
	}
	else{
  	//printf("Print number: %d\n", $3);
	}
}
| print_token address_token NumVal{
	if(compile){
		$$ = new PrintCharExprAST($3);
	}
	else{
  	//printf("Print character: %c\n", $3);
	}
}
| add_token NumVal NumVal address_token{
	if(compile){
		$$ = new AddExprAST($2, $3, $4);
	}
	else{
  	//registers[$4] = $2 + $3;
	}
}
| mul_token NumVal NumVal address_token{
	if(compile){
		$$ = new MulExprAST($2, $3, $4);
	}
	else{
  	//registers[$4] = $2 * $3;
	}
}
| inc_token address_token{
	if(compile){
		$$ = new IncExprAST($2);
	}
	else{
  	//registers[$2]++;
	}
}
;

NumVal: num_token {
	if(compile){
		$$ = new NumberExprAST($1);
	}
	else{
  	//$$ = $1;
	}
}
| address_token{
	if(compile){
		$$ = new VarExprAST($1);
	}
	else{
  	//$$ = registers[$1]; //Here we have to fetch a register value
	}
}
%%


extern FILE* yyin;
int main(int argc, char** argv){

	if(argc != 2)
		yyerror("Usage: ./pixelcode path_to_image_file");

	parseImage(argv[1]);
	yyin = fopen("tmpReprFile", "r");
	if(!yyin)
		yyerror("Unable to open tmpReprFile file!");
	yyparse();

  return 0;
}
